@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/office/{UserOffice}/entrydate/{UserLength:int}"

@using Microsoft.EntityFrameworkCore;
@inject TescatContext Context



<nav aria-label="breadcrumb">

    <ol class="breadcrumb">

        <li class="breadcrumb-item">
            <a href="/">Inicio</a>
        </li>

        <li class="breadcrumb-item active" aria-current="page">
            Buscar
        </li>

    </ol>

</nav>

<h3 class="mt-5 mb-4">Resultados para "@SearchTerm"</h3>

<SearchFilter SearchTerm="@SearchTerm" UserOffice="@UserOffice" UserLength=UserLength />

@if (_searchResults == null)
{
    <p>Cargando los resultados de la busqueda...</p>
}
else if (!_searchResults.Any())
{
    <p>No se han encontrado resultados ☹️</p>
}
else
{

    <UserDetails User="_selectedUser" />


    <div class="grid">
        @foreach (var user in _searchResults)
        {

            <UserCard User="user"
                      OnSelected="HandleUserSelected" />

        }

    </div>

}


@code {
    private User[]? _searchResults { get; set; }
    private User[]? _cachedSearchResults { get; set; } = Array.Empty<User>();
    private User? _selectedUser;

    [Parameter]
    public string
    SearchTerm
    { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string?
    UserOffice
    { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int?
    UserLength
    { get; set; }



    protected override async
    Task OnInitializedAsync()
    {
        try
        {

            var searchTermLower = SearchTerm.ToLower();


            var query = Context.Users
            .Where
                (
                x =>

                x.Name.ToLower()
                .Contains
                (searchTermLower) ||

                x.Position.ToLower()
                .Contains
                (searchTermLower) ||

                x.Department.ToLower()
                .Contains
                (searchTermLower) ||

                x.Mobile.ToString()
                .Contains
                (searchTermLower) ||

                x.Telephone.ToString()
                .Contains
                (searchTermLower)

            );

            _searchResults = await query.ToArrayAsync();
            _cachedSearchResults = _searchResults;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hubo un problema al cargar la informacion del usuario:{ex.Message}");
        }
    }




    private void
    UpdateFilters()
    {
        var filters = new List<Func<User, bool>>();

        if (!string.IsNullOrEmpty(UserOffice))
        {
            filters.Add(x =>
              x.Office?.Contains(UserOffice, StringComparison.CurrentCultureIgnoreCase) == true);
        }


        if (UserLength.HasValue)
        {
            var currentDate = DateTime.Now;

            if (UserLength.Value >= 0)
            {
                filters.Add(x =>

                (currentDate - x.Entry_Date).TotalDays / 365.25 > UserLength.Value);
            }
            else
            {
                filters.Add(x =>

                (currentDate - x.Entry_Date).TotalDays / 365.25 < Math.Abs(UserLength.Value));
            }
        }


        if (filters.Any())
        {
            _searchResults = _cachedSearchResults?.Where(user => filters.All(filter => filter(user))).ToArray();
        }
        else
        {
            _searchResults = _cachedSearchResults;
        }

    }


    protected override void
    OnParametersSet()
    => UpdateFilters();

    private void
    HandleUserSelected(User user)
    => _selectedUser = user;




}

